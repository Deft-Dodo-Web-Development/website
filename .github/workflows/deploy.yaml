name: deploy
on:
  release:
    types: [published]
  workflow_dispatch:

jobs:
  publish-api:
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Checkout
        if: contains(github.event.release.tag_name, '@deft-dodo/api')
        uses: actions/checkout@v3

      - name: Echo
        if: contains(github.event.release.tag_name, '@deft-dodo/api')
        run: echo "Building API"

      - name: Set up Docker Buildx
        if: contains(github.event.release.tag_name, '@deft-dodo/api')
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        if: contains(github.event.release.tag_name, '@deft-dodo/api')
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASSWORD }}

      - name: Install Docker Compose
        if: contains(github.event.release.tag_name, '@deft-dodo/api')
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and push
        if: contains(github.event.release.tag_name, '@deft-dodo/api')
        run: |
          docker-compose -f docker-compose.yml build strapi
          docker push ghcr.io/deft-dodo-web-development/strapi:latest

  publish-website:
    runs-on: ubuntu-latest
    environment:
      name: Production
    steps:
      - name: Checkout
        if: contains(github.event.release.tag_name, '@deft-dodo/www')
        uses: actions/checkout@v3

      - name: Echo
        if: contains(github.event.release.tag_name, '@deft-dodo/www')
        run: echo "Building Website"

      - name: Set up Docker Buildx
        if: contains(github.event.release.tag_name, '@deft-dodo/www')
        uses: docker/setup-buildx-action@v1

      - name: Log in to GitHub Container Registry
        if: contains(github.event.release.tag_name, '@deft-dodo/www')
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ secrets.GHCR_USERNAME }}
          password: ${{ secrets.GHCR_PASSWORD }}

      - name: Install Docker Compose
        if: contains(github.event.release.tag_name, '@deft-dodo/www')
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Build and push
        if: contains(github.event.release.tag_name, '@deft-dodo/www')
        run: |
          export NEXT_PUBLIC_STRAPI_URL=http://127.0.0.1:1337
          docker-compose -f docker-compose.yml build website
          docker push ghcr.io/deft-dodo-web-development/website:latest

  pull-changes:
    needs: [publish-api, publish-website]
    if: contains(github.event.release.tag_name, '@deft-dodo/www') || contains(github.event.release.tag_name, '@deft-dodo/api')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.AWS_IP }} >> ~/.ssh/known_hosts
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Pull changes
        run: ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_IP }} "cd /home/ubuntu/deft-dodo/website && sudo docker compose pull && sudo docker compose up -d"
      - name: Clean up
        run: ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_IP }} "sudo docker system prune -f"
      - name: Execute update
        run: |
          ssh -i ~/.ssh/id_rsa ubuntu@${{ secrets.AWS_IP }} "curl -X POST https://deftdodo.dev/api/update -H 'Content-Type: application/json'"
